"""
    Api documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.bad_request import BadRequest
from openapi_client.model.send_message_controller_send_buttons_message_request import SendMessageControllerSendButtonsMessageRequest
from openapi_client.model.send_message_controller_send_buttons_message_with_media_request import SendMessageControllerSendButtonsMessageWithMediaRequest
from openapi_client.model.send_message_controller_send_list_message_request import SendMessageControllerSendListMessageRequest
from openapi_client.model.send_message_controller_send_location_message_request import SendMessageControllerSendLocationMessageRequest
from openapi_client.model.send_message_controller_send_media_url_request import SendMessageControllerSendMediaUrlRequest
from openapi_client.model.send_message_controller_send_template_messsage_request import SendMessageControllerSendTemplateMesssageRequest
from openapi_client.model.send_message_controller_send_text_message_request import SendMessageControllerSendTextMessageRequest
from openapi_client.model.send_message_controller_send_text_message_to_single_user_request import SendMessageControllerSendTextMessageToSingleUserRequest


class SendMessageControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.send_message_controller_send_audio_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/audio',
                'operation_id': 'send_message_controller_send_audio_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'id',
                    'caption',
                    'file',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'id':
                        (str,),
                    'caption':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                    'id': 'id',
                    'caption': 'caption',
                    'file': 'file',
                },
                'location_map': {
                    'instance_key': 'path',
                    'id': 'query',
                    'caption': 'query',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_buttons_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/templateMessage',
                'operation_id': 'send_message_controller_send_buttons_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_buttons_message_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_buttons_message_request':
                        (SendMessageControllerSendButtonsMessageRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_buttons_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_buttons_message_with_media_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/templateMessageWithMedia',
                'operation_id': 'send_message_controller_send_buttons_message_with_media',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_buttons_message_with_media_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_buttons_message_with_media_request':
                        (SendMessageControllerSendButtonsMessageWithMediaRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_buttons_message_with_media_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_document_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/document',
                'operation_id': 'send_message_controller_send_document_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'id',
                    'caption',
                    'file',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'id':
                        (str,),
                    'caption':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                    'id': 'id',
                    'caption': 'caption',
                    'file': 'file',
                },
                'location_map': {
                    'instance_key': 'path',
                    'id': 'query',
                    'caption': 'query',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_image_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/image',
                'operation_id': 'send_message_controller_send_image_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'id',
                    'caption',
                    'file',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'id':
                        (str,),
                    'caption':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                    'id': 'id',
                    'caption': 'caption',
                    'file': 'file',
                },
                'location_map': {
                    'instance_key': 'path',
                    'id': 'query',
                    'caption': 'query',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_list_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/listMessage',
                'operation_id': 'send_message_controller_send_list_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_list_message_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_list_message_request':
                        (SendMessageControllerSendListMessageRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_list_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_location_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/location',
                'operation_id': 'send_message_controller_send_location_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_location_message_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_location_message_request':
                        (SendMessageControllerSendLocationMessageRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_location_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_media_url_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/mediaUrl',
                'operation_id': 'send_message_controller_send_media_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_media_url_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_media_url_request':
                        (SendMessageControllerSendMediaUrlRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_media_url_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_template_messsage_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/contactMessage',
                'operation_id': 'send_message_controller_send_template_messsage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_template_messsage_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_template_messsage_request':
                        (SendMessageControllerSendTemplateMesssageRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_template_messsage_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_text_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/textToMany',
                'operation_id': 'send_message_controller_send_text_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_text_message_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_text_message_request':
                        (SendMessageControllerSendTextMessageRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_text_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_text_message_to_single_user_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/text',
                'operation_id': 'send_message_controller_send_text_message_to_single_user',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'send_message_controller_send_text_message_to_single_user_request',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'send_message_controller_send_text_message_to_single_user_request':
                        (SendMessageControllerSendTextMessageToSingleUserRequest,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                },
                'location_map': {
                    'instance_key': 'path',
                    'send_message_controller_send_text_message_to_single_user_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_message_controller_send_video_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/rest/sendMessage/{instance_key}/video',
                'operation_id': 'send_message_controller_send_video_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance_key',
                    'id',
                    'caption',
                    'file',
                ],
                'required': [
                    'instance_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance_key':
                        (str,),
                    'id':
                        (str,),
                    'caption':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'instance_key': 'instance_key',
                    'id': 'id',
                    'caption': 'caption',
                    'file': 'file',
                },
                'location_map': {
                    'instance_key': 'path',
                    'id': 'query',
                    'caption': 'query',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def send_message_controller_send_audio_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an audio to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_audio_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            id (str): [optional]
            caption (str): [optional]
            file (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_audio_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_buttons_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an interactive template message to an WhatsApp User  # noqa: E501

        The templateMessage is a special type of message that allows <br />     you to send a message with a special buttons like quickReply, <br />     urlButton, callButton, etc. <br />     <br>     <strong>How to send templateMessage?</strong> <br />     <br>     The messageData object requires you to specify the type of button you <br />     want to send to the user. <br />     The type of button you can send are: <br />     <br>     <code>replyButton</code><br><br>     <code>urlButton</code><br><br>     <code>callButton</code><br><br>     <br>     In the <i>payload</i> field, you have to enter the payload <br>     i.e. url in case of the urlButton or phone number in case of callButton <br>     <br>     <strong>Example of templateMessage? </strong> <br />     <br>     <code><br> {<br>    \"messageData\":{<br>       \"to\":\"918788889688\",<br>       \"text\":\"string\",<br>       \"buttons\":[<br>          {<br>             \"type\":\"replyButton\",<br>             \"title\":\"This is a replyButton\"<br>          },<br>          {<br>             \"type\":\"urlButton\",<br>             \"title\":\"This is a urlButton\",<br>             \"payload\":\"https://google.com\"<br>          },<br>          {<br>             \"type\":\"callButton\",<br>             \"title\":\"This is a callButton\",<br>             \"payload\":\"918788889688\"<br>          }<br>       ],<br>       \"footerText\":\"Hello World\"<br>    }<br> }<br>     </code>     <br>     <strong>NOTE: </strong>     <i>Due to certain limitations from WhatsApp, when you send templateMessage to someone, <br>     the message won't be visible in you phone. Also you will also see that the message has been sent <br>     too your own phone number.<br>     </i>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_buttons_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_buttons_message_request (SendMessageControllerSendButtonsMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_buttons_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_buttons_message_with_media(
        self,
        instance_key,
        **kwargs
    ):
        """Send an interactive template message with mediaHeader to an WhatsApp User  # noqa: E501

        The templateMessage is a special type of message that allows <br />     you to send a message with a special buttons like quickReply, <br />     urlButton, callButton, etc. <br />     <br>     <strong>How to send templateMessage?</strong> <br />     <br>     The messageData object requires you to specify the type of button you <br />     want to send to the user. <br />     The type of button you can send are: <br />     <br>     <code>replyButton</code><br><br>     <code>urlButton</code><br><br>     <code>callButton</code><br><br>     <br>     In the <i>payload</i> field, you have to enter the payload <br>     i.e. url in case of the urlButton or phone number in case of callButton <br>     <br>     <strong>Example of templateMessage? </strong> <br />     <br>     <code><br> {<br>    \"messageData\":{<br>       \"to\":\"918788889688\",<br>       \"text\":\"string\",<br>       \"buttons\":[<br>          {<br>             \"type\":\"replyButton\",<br>             \"title\":\"This is a replyButton\"<br>          },<br>          {<br>             \"type\":\"urlButton\",<br>             \"title\":\"This is a urlButton\",<br>             \"payload\":\"https://google.com\"<br>          },<br>          {<br>             \"type\":\"callButton\",<br>             \"title\":\"This is a callButton\",<br>             \"payload\":\"918788889688\"<br>          }<br>       ],<br>       \"footerText\":\"Hello World\"<br>    }<br> }<br>     </code>     <br>     <strong>NOTE: </strong>     <i>Due to certain limitations from WhatsApp, when you send templateMessage to someone, <br>     the message won't be visible in you phone. Also you will also see that the message has been sent <br>     too your own phone number.<br>     </i>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_buttons_message_with_media(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_buttons_message_with_media_request (SendMessageControllerSendButtonsMessageWithMediaRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_buttons_message_with_media_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_document_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an document to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_document_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            id (str): [optional]
            caption (str): [optional]
            file (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_document_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_image_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an image message to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_image_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            id (str): [optional]
            caption (str): [optional]
            file (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_image_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_list_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an vacard message to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_list_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_list_message_request (SendMessageControllerSendListMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_list_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_location_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an location to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_location_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_location_message_request (SendMessageControllerSendLocationMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_location_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_media_url(
        self,
        instance_key,
        **kwargs
    ):
        """Send a media message via a URL  # noqa: E501

        The this endpoint allows you to send a media URL to a user. <br>  The <strong>url</strong> parameter is the URL of the media to be sent. <br> The <strong>to</strong> parameter is the phone number of the user to send the media to. <br> The <strong>type</strong> parameter is the type of media to be sent. <br> The type of media can be one of the following: <ul> <li><strong>image</strong> - an image</li> <li><strong>video</strong> - a video</li> <li><strong>audio</strong> - an audio file</li> <li><strong>document</strong> - a document</li> </ul> <br> The <strong>caption</strong> parameter is the caption of the media to be sent. <br> The <strong>mimeType</strong> parameter is the mimeType of the media.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_media_url(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_media_url_request (SendMessageControllerSendMediaUrlRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_media_url_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_template_messsage(
        self,
        instance_key,
        **kwargs
    ):
        """Send an vacard message to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_template_messsage(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_template_messsage_request (SendMessageControllerSendTemplateMesssageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_template_messsage_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_text_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send a text message to multiple WhatsApp users  # noqa: E501

        Note that while sending to single chat, the id should not contain @s.whatsapp.net. <br>     However, while sending to groups, the id should end with @g.us <br>       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_text_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_text_message_request (SendMessageControllerSendTextMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_text_message_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_text_message_to_single_user(
        self,
        instance_key,
        **kwargs
    ):
        """Send a text message to an WhatsApp User  # noqa: E501

        Note that while sending to single chat, the id should not contain @s.whatsapp.net. <br>     However, while sending to groups, the id should end with @g.us <br>       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_text_message_to_single_user(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            send_message_controller_send_text_message_to_single_user_request (SendMessageControllerSendTextMessageToSingleUserRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_text_message_to_single_user_endpoint.call_with_http_info(**kwargs)

    def send_message_controller_send_video_message(
        self,
        instance_key,
        **kwargs
    ):
        """Send an video to an WhatsApp User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message_controller_send_video_message(instance_key, async_req=True)
        >>> result = thread.get()

        Args:
            instance_key (str):

        Keyword Args:
            id (str): [optional]
            caption (str): [optional]
            file (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['instance_key'] = \
            instance_key
        return self.send_message_controller_send_video_message_endpoint.call_with_http_info(**kwargs)

